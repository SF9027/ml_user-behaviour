# Exploratory data analysis

```{r, echo = FALSE, message = FALSE}
source(here::here("scripts/setup.R"))
```

```{r}
install.packages("summarytools")
library(summarytools)
library(DataExplorer)
```

## Data inspection

### Data check

```{r}
str(Userdataset)
summary(Userdataset)

print(dfSummary(Userdataset,style="grid",
                plain.ascii = FALSE, 
                tmp.img.dir = "/tmp",
                graph.magnif = 0.8),
      method = "render")

```

### Data Attribute Modification

We will divide the data in the data table into two categories， numeric and factor. We will attribute the columns "country", "civilityGenderId", "hasAnyApp", "hasProfilePicture", "langEn", "langFr", "langDe", "langEs", "langIt", "genderFamale", "genderMale" from change numeric to factor. The attributes of the remaining columns are changed from integer to numeric.

```{r}
library(purrr)
library(dplyr)
library(DT)

Userdataset <- as.data.frame(Userdataset)

Userdataset_factor <- Userdataset %>% select(1, 10, 11, 12, 15, 16, 17, 18, 19, 20, 21) %>% colnames()
for(i in Userdataset_factor){
    Userdataset[,i] <- as.factor(Userdataset[,i])
} 

Userdataset_numeric <- Userdataset %>% select(2, 3, 4, 5, 6, 8, 9, 14) %>% colnames()
for(i in Userdataset_numeric){
    Userdataset[,i] <- as.numeric(Userdataset[,i])
} 

        
Userdataset %>% datatable(rownames = FALSE,
                     option = list(scrollX = T,
                                   pageLength = 5))

str(Userdataset)

```

## Data description by using descriptive statistics and graphs

### Graphs for "latent"

The goal of our project is to build the model to predict whether users are latent on this platform. So here we make a comparison of users with latent status and non-latent status.

```{r}

latent <- Userdataset %>% ggplot(mapping = aes(x=latent,fill=latent))+geom_bar()+scale_color_identity()
latent

```
As can be seen from the figure, the data results are extremely unbalanced. However, the result of generating this graph may be caused by our random screening of data. So we will try to use group selection to improve this.

### Graphs for numeric variables

#### Bar-chart

```{r}
#Continuous Variables

Userdataset %>% select(productsPassRate) %>% 
keep(is.numeric) %>% 
  gather() %>% 
  ggplot(aes(value)) +
  facet_wrap(~ key, scales = "free") +
  geom_histogram()

```
因为大部分user都没有该项数据，所以如图所示，数据极度不平衡。

```{r}
#Discrete variables

Userdataset %>% select(2, 3, 4, 5, 6, 8, 9, 14) %>% 
  keep(is.numeric) %>% 
  gather() %>% 
  ggplot(aes(value)) +
  facet_wrap(~ key, scales = "free") +
  geom_bar()

```

#### Box chart 

```{r}

Userdataset %>% select(2, 3, 4, 5, 6, 7, 8, 9, 14) %>% 
  keep(is.numeric) %>% 
  gather() %>% 
  ggplot(aes(value)) +
  facet_wrap(~ key, scales = "free") +
  geom_boxplot()

```


### Graphs for non-numeric variables

#### Graph for country variables

```{r}

country <- Userdataset %>% 
  group_by(country) %>%
  summarise(country_number = n())

 p1 <- ggplot(data = country,aes(x = country_number, y = country))+
  geom_col()
p1

```

```{r}

library(ggplot2)
library(maps)

# Load the world map data
world_map <- map_data("world")

# Match the country names with their respective locations
country_loc <- data.frame(region = tolower(world_map$region),
                          long = world_map$long,
                          lat = world_map$lat,
                          stringsAsFactors = FALSE)

# Aggregate the user count by country
country_count <- Userdataset %>% 
  group_by(country) %>%
  summarise(country_number = n())

# Merge the country location data with the country count data
country_map <- merge(country_loc, country_count, by = "region")

# Plot the map
p2 <- ggplot(country_map, aes(x = long, y = lat, group = group, fill = country_number)) +
  geom_polygon(color = "white", size = 0.2) +
  scale_fill_gradient(low = "white", high = "steelblue") +
  coord_map() +
  theme_void()

# Show the map
p2




```

```{r}

# 删掉
mosaicplot(country_number ~ country, data = country, color = "blue", main = "Mosaic Plot of Countries")

```


#### Graph for language variables

```{r}

a <- unlist(Userdataset$langEn) 
langEn <- sum(a=="1")
b <- unlist(Userdataset$langFr) 
langFr <- sum(b=="1")
c <- unlist(Userdataset$langDe) 
langDe <- sum(c=="1")
d <- unlist(Userdataset$langEs) 
langEs <- sum(d=="1")
e <- unlist(Userdataset$langIt)
langIt <- sum(e=="1")

language1 <- c("langEn","langFr","LangDe","langEs","langIt")
number <- c(langEn,langFr,langDe,langEs,langIt)
LANGUAGE_DATA <- data.frame(language1,number)
p2 <- ggplot(LANGUAGE_DATA,aes(x=reorder(language1,number),y=number,fill=language1))+geom_col()+
  geom_text(aes(label = number), vjust = 1.5, colour = "white", position = position_dodge(.9), size = 5)
p2

```

#### Graph for gender varibles

```{r}

f <- unlist(Userdataset$genderFamale) 
genderFamale <- sum(f=="1")
g <- unlist(Userdataset$genderMale) 
genderMale <- sum(g=="1")

gender1 <- c("genderFamale", "genderMale")
number1 <- c(genderFamale,genderMale)
GENDER_DATA <- data.frame(gender1,number1)
p3 <- ggplot(GENDER_DATA,aes(x=reorder(gender1,number1),y=number1,fill=gender1))+geom_col()+
  geom_text(aes(label = number1), vjust = 1.5, colour = "white", position = position_dodge(.9), size = 5)
p3

```

#### Graph for other variables

```{r}

Userdataset %>% select(civilityGenderId, hasAnyApp, hasProfilePicture) %>% 
  gather() %>% 
  ggplot(aes(value)) +
  facet_wrap(~ key, scales = "free") +
  geom_bar()

```

#### Box plot

```{r}

Userdataset %>% select(10, 11, 12, 15,16,17,18,19, 20, 21) %>% 
  keep(is.factor) %>% 
  gather() %>% 
  ggplot(aes(value)) +
  facet_wrap(~ key, scales = "free") +
  geom_boxplot()


```


## Examination of the relationship between variables

To observe the relationship between all of the variables, we made the "Correlation plot" and "Multivariate correlation scatter matrix plots" for numeric data.

and "Mosaic chart" for Non-numeric data.

### Multivariate correlation scatter matrix plots - Nurmeric

```{r}
library(GGally)

Userdataset %>% select(2, 3, 4, 5, 6, 8, 9, 13, 14) %>% ggpairs()

```

### Correlation plot - Numeric

```{r}

UserdatasetP <- Userdataset %>% select(,-22,-13)
plot_correlation(UserdatasetP, type= 'c', cor_args = list( 'use' = 'complete.obs'))

```

### Correlation matrix plot



* Mapping out the underlying structure
* Identifying the most important variables
* Univariate visualizations
* Multivariate visualizations
* Summary tables